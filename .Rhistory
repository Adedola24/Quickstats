stop("Error: The dataset 'Out.perfm_lvl_Cnt.Economically_Disadvantaged' does not exist in the environment.")
}
# Define the correct order of columns
desired_column_order <- c("spread_sheet", "cohort", "perfm_lvl", "Race",
"Economically_Disadvantaged", "Disability", "Language",
"Military", "Homeless", "Migrant", "Count")
# Check if dataset exists
if (exists("Out.perfm_lvl_Cnt.Economically_Disadvantaged")) {
# Create Out.Prep from the existing dataset
Out.Prep <- Out.perfm_lvl_Cnt.Economically_Disadvantaged
# Ensure all required columns exist in Out.Prep, adding missing ones as NA
missing_cols <- setdiff(desired_column_order, colnames(Out.Prep))
if (length(missing_cols) > 0) {
for (col in missing_cols) {
Out.Prep[[col]] <- NA  # Add missing columns with NA values
}
}
# If demographic data is missing, attempt to join it from bench_mark_scores_stacked
if (exists("bench_mark_scores_stacked")) {
# Ensure spread_sheet + cohort uniquely identify records in bench_mark_scores_stacked
bench_mark_clean <- bench_mark_scores_stacked %>%
select(spread_sheet, cohort, Race, Disability, Language,
Military, Homeless, Migrant) %>%
distinct(spread_sheet, cohort, .keep_all = TRUE)  # Remove duplicates to avoid many-to-many issues
# Join demographic information to Out.Prep
Out.Prep <- Out.Prep %>%
left_join(bench_mark_clean, by = c("spread_sheet", "cohort"))
}
# Reorder the columns as per the required structure
Out.Prep <- Out.Prep %>% select(all_of(desired_column_order))
# Verify the dataset
print("Out.Prep exists in the environment:")
print(exists("Out.Prep"))
# Check objects in the environment
print("Objects in the environment:")
print(ls())
# Create directory if it does not exist
if (!dir.exists("week_4_HW")) {
dir.create("week_4_HW", recursive = TRUE)
}
# Save Out.Prep as an RDS file
saveRDS(Out.Prep, file.path("week_4_HW", "Output.RDS"))
# Confirm the file was saved successfully
print("File saved successfully:")
print(file.exists(file.path("week_4_HW", "Output.RDS")))
} else {
stop("Error: The dataset 'Out.perfm_lvl_Cnt.Economically_Disadvantaged' does not exist in the environment.")
}
library(tidyr)
library(dplyr)
colnames(bench_mark_scores_stacked)
Out.Prep <- Out.Prep %>%
left_join(select(bench_mark_scores_stacked, spread_sheet, cohort, Race, Disability, Language, Military, Homeless, Migrant),
by = c("spread_sheet", "cohort"))
# Verify that columns were added
colnames(Out.Prep)
long_data <- Out.Prep %>%
pivot_longer(cols = c("Race", "Disability", "Language", "Military", "Homeless", "Migrant"),
names_to = "Demographic_Group",
values_to = "Group_Status")
# Check output
head(long_data)
Out.Prep <- Out.Prep %>%
+ left_join(select(bench_mark_scores_stacked, spread_sheet, cohort, Race, Disability, Language, Military, Homeless, Migrant),
+           by = c("spread_sheet", "cohort"))
library(dplyr)
# Ensure all required columns exist in Out.Prep
missing_cols <- setdiff(desired_column_order, colnames(Out.Prep))
if (length(missing_cols) > 0) {
for (col in missing_cols) {
Out.Prep[[col]] <- NA  # Add missing columns with NA values
}
# If demographic data is missing, attempt to join it from bench_mark_scores_stacked
if (exists("bench_mark_scores_stacked")) {
# Ensure spread_sheet + cohort uniquely identify records in bench_mark_scores_stacked
bench_mark_clean <- bench_mark_scores_stacked %>%
select(spread_sheet, cohort, Race, Disability, Language,
Military, Homeless, Migrant) %>%
distinct(spread_sheet, cohort, .keep_all = TRUE)  # Remove duplicates to avoid many-to-many issues
# Corrected left_join syntax
Out.Prep <- Out.Prep %>%
left_join(bench_mark_clean, by = c("spread_sheet", "cohort"))
}
# Reorder the columns as per the required structure
Out.Prep <- Out.Prep %>% select(all_of(desired_column_order))
# Verify the dataset
print("Out.Prep exists in the environment:")
print(exists("Out.Prep"))
# Check objects in the environment
print("Objects in the environment:")
print(ls())
# Define the correct order of columns
desired_column_order <- c("spread_sheet", "cohort", "perfm_lvl", "Race",
"Economically_Disadvantaged", "Disability", "Language",
"Military", "Homeless", "Migrant", "Count")
# Ensure Out.Prep exists
if (exists("Out.perfm_lvl_Cnt.Economically_Disadvantaged")) {
Out.Prep <- Out.perfm_lvl_Cnt.Economically_Disadvantaged
} else {
stop("Error: The dataset 'Out.perfm_lvl_Cnt.Economically_Disadvantaged' does not exist in the environment.")
}
# Ensure all required columns exist in Out.Prep
missing_cols <- setdiff(desired_column_order, colnames(Out.Prep))
if (length(missing_cols) > 0) {
for (col in missing_cols) {
Out.Prep[[col]] <- NA  # Add missing columns filled with NA
}
}
# Ensure demographic data is added from bench_mark_scores_stacked
if (exists("bench_mark_scores_stacked")) {
# Select required demographic columns and remove duplicates to avoid many-to-many joins
bench_mark_clean <- bench_mark_scores_stacked %>%
select(spread_sheet, cohort, Race, Disability, Language,
Military, Homeless, Migrant) %>%
distinct(spread_sheet, cohort, .keep_all = TRUE)
# Merge with Out.Prep
Out.Prep <- Out.Prep %>%
left_join(bench_mark_clean, by = c("spread_sheet", "cohort"))
}
# Reorder the columns
Out.Prep <- Out.Prep %>% select(all_of(desired_column_order))
# Verify if Out.Prep is now in the environment
print("Out.Prep exists in the environment:")
print(exists("Out.Prep"))
# Create directory if it does not exist
if (!dir.exists("week_4_HW")) {
dir.create("week_4_HW", recursive = TRUE)
}
# Save Out.Prep as an RDS file
saveRDS(Out.Prep, file.path("week_4_HW", "Output.RDS"))
# Confirm the file is saved
print("File saved successfully:")
print(file.exists(file.path("week_4_HW", "Output.RDS")))
exists("Out.perfm_lvl_Cnt.Economically_Disadvantaged")
str(Out.perfm_lvl_Cnt.Economically_Disadvantaged)
ls()
Out.perfm_lvl_Cnt.Economically_Disadvantaged <- Out.perfm_lvl_Cnt_Economically_Disadvantaged
Out.perfm_lvl_Cnt.Economically_Disadvantaged <- data.frame(
spread_sheet = character(),
cohort = character(),
perfm_lvl = character(),
Economically_Disadvantaged = character(),
Count = integer()
)
# Ensure the dataset exists
if (!exists("Out.perfm_lvl_Cnt.Economically_Disadvantaged")) {
stop("Error: The dataset 'Out.perfm_lvl_Cnt.Economically_Disadvantaged' does not exist. Check dataset creation!")
} else {
Out.Prep <- Out.perfm_lvl_Cnt.Economically_Disadvantaged
}
# Proceed with further processing...
print("Dataset is available. Proceeding with processing...")
# Ensure the dataset exists before proceeding
if (!exists("Out.perfm_lvl_Cnt.Economically_Disadvantaged")) {
stop("Error: The dataset 'Out.perfm_lvl_Cnt.Economically_Disadvantaged' does not exist. Check dataset creation!")
} else {
Out.Prep <- Out.perfm_lvl_Cnt.Economically_Disadvantaged
}
# Define the correct order of columns
desired_column_order <- c("spread_sheet", "cohort", "perfm_lvl", "Race",
"Economically_Disadvantaged", "Disability", "Language",
"Military", "Homeless", "Migrant", "Count")
# Ensure all required columns exist in Out.Prep, adding missing ones as NA
missing_cols <- setdiff(desired_column_order, colnames(Out.Prep))
if (length(missing_cols) > 0) {
for (col in missing_cols) {
Out.Prep[[col]] <- NA  # Add missing columns filled with NA
}
}
# Reorder the columns as per the required structure
Out.Prep <- Out.Prep %>% select(all_of(desired_column_order))
# Verify if Out.Prep is now in the environment
print("Out.Prep exists in the environment:")
print(exists("Out.Prep"))
# Create directory if it does not exist
if (!dir.exists("week_4_HW")) {
dir.create("week_4_HW", recursive = TRUE)
}
# Save Out.Prep as an RDS file
saveRDS(Out.Prep, file.path("week_4_HW", "Output.RDS"))
# Confirm file was saved successfully
print("File saved successfully:")
print(file.exists(file.path("week_4_HW", "Output.RDS")))
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
exists("Out.perfm_lvl_Cnt.Economically_Disadvantaged")
data_A <- data_A %>% mutate(cohort = "Cohort A")
data_B <- data_B %>% mutate(cohort = "Cohort B")
data_C <- data_C %>% mutate(cohort = "Cohort C")
bench_mark_scores_stacked <- bind_rows(
data_A %>% mutate(spread_sheet = "DR_A.xlsx"),
data_B %>% mutate(spread_sheet = "DR_B.xlsx"),
data_C %>% mutate(spread_sheet = "DR_C.xlsx")
)
# Display first few rows
head(bench_mark_scores_stacked)
if (exists("data_A") & exists("data_B") & exists("data_C")) {
# Add missing 'cohort' column manually before merging
data_A <- data_A %>% mutate(cohort = "Cohort A")
data_B <- data_B %>% mutate(cohort = "Cohort B")
data_C <- data_C %>% mutate(cohort = "Cohort C")
# Bind rows together and add source identifiers
bench_mark_scores_stacked <- bind_rows(
data_A %>% mutate(spread_sheet = "DR_A.xlsx"),
data_B %>% mutate(spread_sheet = "DR_B.xlsx"),
data_C %>% mutate(spread_sheet = "DR_C.xlsx")
)
# Display first few rows
head(bench_mark_scores_stacked)
} else {
stop("Error: One or more datasets (data_A, data_B, data_C) are missing.")
}
bench_mark_scores_stacked$spread_sheet <- factor(bench_mark_scores_stacked$spread_sheet,
levels = c('DR_A.xlsx','DR_B.xlsx','DR_C.xlsx'),
ordered = TRUE)
# Ensure cohort is a factor with correct levels
valid_cohorts <- c("Cohort A", "Cohort B", "Cohort C")  # Adjusted to match existing data
bench_mark_scores_stacked$cohort <- factor(bench_mark_scores_stacked$cohort,
levels = valid_cohorts,
ordered = TRUE)
summary(bench_mark_scores_stacked$cohort)
if ("Race" %in% colnames(bench_mark_scores_stacked)) {
valid_races <- c("White", "Black", "Asian", "Pacific_Islander")
bench_mark_scores_stacked$Race <- factor(bench_mark_scores_stacked$Race,
levels = valid_races,
ordered = TRUE)
# Verify changes in Race
summary(bench_mark_scores_stacked$Race)
}
if ("perfm_lvl" %in% colnames(bench_mark_scores_stacked)) {
valid_perf_levels <- c("below", "average", "above")
bench_mark_scores_stacked$perfm_lvl <- factor(bench_mark_scores_stacked$perfm_lvl,
levels = valid_perf_levels,
ordered = TRUE)
# Check the distribution of performance levels
summary(bench_mark_scores_stacked$perfm_lvl)
}
str(bench_mark_scores_stacked)
bench_mark_scores_stacked <- bench_mark_scores_stacked %>%
mutate(across(starts_with("Quarter"), ~ as.numeric(gsub("%", "", .)) / 100, .names = "num_{col}"))
# Compute maximum score across the three quarters
bench_mark_scores_stacked <- bench_mark_scores_stacked %>%
rowwise() %>%
mutate(Max_Score = max(c_across(starts_with("num_Quarter")), na.rm = TRUE)) %>%
ungroup()
# Verify the new column
summary(bench_mark_scores_stacked$Max_Score)
bench_mark_scores_stacked <- bench_mark_scores_stacked %>%
rowwise() %>%
mutate(Max_Score = if_all(starts_with("num_Quarter"), ~ !is.na(.)) * max(c_across(starts_with("num_Quarter")), na.rm = TRUE)) %>%
mutate(Max_Score = ifelse(is.infinite(Max_Score), NA, Max_Score)) %>%  # Convert -Inf to NA
ungroup()
summary(bench_mark_scores_stacked$Max_Score)
# Define performance levels based on Max_Score
bench_mark_scores_stacked <- bench_mark_scores_stacked %>%
mutate(perfm_lvl = case_when(
Max_Score > 0.75 ~ "above",
Max_Score <= 0.60 ~ "below",
TRUE ~ "average"
))
unique(bench_mark_scores_stacked$perfm_lvl)
bench_mark_scores_stacked <- bench_mark_scores_stacked %>%
mutate(cohort = case_when(
spread_sheet == "DR_A.xlsx" ~ "Cohort A",
spread_sheet == "DR_B.xlsx" ~ "Cohort B",
spread_sheet == "DR_C.xlsx" ~ "Cohort C"
))
unique(bench_mark_scores_stacked$cohort)
total_participants <- bench_mark_scores_stacked %>%
group_by(spread_sheet, cohort) %>%
summarise(Count = n(), .groups = 'drop')
performance_by_cohort_dr <- bench_mark_scores_stacked %>%
group_by(spread_sheet, cohort, perfm_lvl) %>%
summarise(Count = n(), .groups = 'drop')
performance_by_race <- bench_mark_scores_stacked %>%
group_by(spread_sheet, cohort, Race, perfm_lvl) %>%
summarise(Count = n(), .groups = 'drop')
performance_by_econ <- bench_mark_scores_stacked %>%
mutate(Economically_Disadvantaged = ifelse(!is.na(`Medicare / Medicaid`), "Yes", "No")) %>%
group_by(spread_sheet, cohort, perfm_lvl, Economically_Disadvantaged) %>%
summarise(Count = n(), .groups = 'drop')
table_creator_helper <- function(group_column) {
bench_mark_scores_stacked %>%
mutate(Group = ifelse(!is.na(.data[[group_column]]), "Yes", "No")) %>%
group_by(spread_sheet, cohort, perfm_lvl, Group) %>%
summarise(Count = n(), .groups = 'drop')
}
performance_by_disability <- table_creator_helper("Disability")
print(performance_by_disability)
table_creator_helper("Economically_Disadvantaged") %>% glimpse()
Table_1_Shell
View(table_1)
read_all_sheets
Week_4_wd <- "C:/Users/gbolu/OneDrive/Desktop/HDS500/DATA"
data_A <- read_all_sheets(file.path(Week_4_wd, "DR_A.xlsx"))
Week_4_wd
data_A <- read_all_sheets(file.path(Week_4_wd, "DR_A.xlsx"))
read_all_sheets <- function(file) {
sheets <- excel_sheets(file)
data_list <- lapply(sheets, function(sheet) read_excel(file, sheet = sheet, col_types = "text"))
names(data_list) <- sheets
bind_rows(data_list, .id = "Sheet")
}
data_A <- read_all_sheets(file.path(Week_4_wd, "DR_A.xlsx"))
Week_4_wd <- "C:/Users/gbolu/OneDrive/Desktop/HDS500/DATA"
data_A <- read_all_sheets(file.path(Week_4_wd, "DR_A.xlsx"))
data_B <- read_all_sheets(file.path(Week_4_wd, "DR_B.xlsx"))
data_C <- read_all_sheets(file.path(Week_4_wd, "DR_C.xlsx"))
combined_data <- bind_rows(data_A, data_B, data_C, .id = "Doctor")
View(combined_data)
combined_data
"C:\Users\gbolu\OneDrive\Desktop\HDS500\DATA\Table_1_Shell.xlsx"
combined_data
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
library('tidyverse')
library(readxl)
library(dplyr)
library(tidyr)
library(ggplot2)
Week_4_wd
library(tidyverse)
library(caret)
library(randomForest)
library(pROC)
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
# Set the file path
file_path <- "C:/Users/gbolu/OneDrive/Desktop/HDS500/DATA/diabetic_data.csv"
library(readr)
df <- read_csv(file_path)
head(df)
df_combined_path <- "C:/Users/gbolu/OneDrive/Desktop/HDS500/DATA/df_combined.csv"
df_combined <- read_csv(df_combined_path)
head(df_combined)
str(df)
summary(df)
# Check structure of data
str(df)
summary(df)
colSums(is.na(df))
df$readmitted <- as.factor(df$readmitted)  # Modify as needed
# Handle missing values - Example (fill NA with mode or median)
df$HbA1c_result <- ifelse(is.na(df$HbA1c_result), "None", df$HbA1c_result)
colnames(df)
df$A1Cresult <- ifelse(is.na(df$A1Cresult), "None", df$A1Cresult)
df$A1Cresult <- ifelse(is.na(df$A1Cresult), "None", df$A1Cresult)
library(dplyr)
df <- df %>%
mutate(A1Cresult = ifelse(is.na(A1Cresult), "None", A1Cresult))
table(df$A1Cresult)
df$A1Cresult <- factor(df$A1Cresult, levels = c("None", "Norm", ">7", ">8"))
df <- df %>% select(-c(unwanted_column))
colnames(df)
# Define training and test set
set.seed(123)
trainIndex <- createDataPartition(df$readmitted, p = 0.7, list = FALSE)
train <- df[trainIndex, ]
test <- df[-trainIndex, ]
base_model <- glm(readmitted ~ ., data = train, family = binomial)
table(train$readmitted)
train$readmitted <- ifelse(train$readmitted == "NO", "No", "Yes")
train$readmitted <- factor(train$readmitted, levels = c("No", "Yes"))
table(train$readmitted)
levels(train$readmitted)
library(nnet)
multi_model <- multinom(readmitted ~ ., data = train)
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(tidyverse)
df <- read.csv("C:/Users/gbolu/OneDrive/Desktop/HDS500/DATA/health_of_the_city_cleaned.csv", stringsAsFactors = TRUE)
df$year <- as.numeric(df$year)  # Ensure year is numeric
df$geography_name <- as.factor(df$geography_name)
df$sex <- as.factor(df$sex)
df$race_ethnicity <- as.factor(df$race_ethnicity)
df$age_category <- as.factor(df$age_category)
df$category <- as.factor(df$category)
ui <- fluidPage(
titlePanel("Health of the City - Interactive Dashboard"),
sidebarLayout(
sidebarPanel(
selectInput("metric", "Select Health Metric:",
choices = unique(df$metric_name), selected = unique(df$metric_name)[1]),
selectInput("year", "Select Year(s):", choices = sort(unique(df$year)),
multiple = TRUE, selected = unique(df$year)),
selectInput("geography", "Select Geography:", choices = unique(df$geography_name)),
selectInput("sex", "Select Sex:", choices = unique(df$sex), selected = "All sexes"),
selectInput("race", "Select Race/Ethnicity:", choices = unique(df$race_ethnicity)),
selectInput("age", "Select Age Category:", choices = unique(df$age_category))
),
mainPanel(
plotOutput("trendPlot"),
plotOutput("barChart"),
tableOutput("summaryStats"),
tableOutput("filteredData")
)
)
)
server <- function(input, output) {
filtered_data <- reactive({
df %>%
filter(metric_name == input$metric,
year %in% input$year,
geography_name == input$geography,
sex == input$sex,
race_ethnicity == input$race,
age_category == input$age)
})
output$trendPlot <- renderPlot({
data <- filtered_data()
if (nrow(data) == 0) {
plot.new()
text(0.5, 0.5, "No data available for selected filters", cex = 1.5)
return()
}
ggplot(data, aes(x = year, y = metric_value, group = category, color = category)) +
geom_line(size = 1.2) + geom_point(size = 2) +
labs(title = "Health Metric Trend Over Time", x = "Year", y = "Metric Value") +
theme_minimal() + theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
output$barChart <- renderPlot({
data <- filtered_data()
if (nrow(data) == 0) {
plot.new()
text(0.5, 0.5, "No data available for selected filters", cex = 1.5)
return()
}
ggplot(data, aes(x = category, y = metric_value, fill = category)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Health Metric Distribution by Category", x = "Category", y = "Metric Value") +
theme_minimal() + theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
output$summaryStats <- renderTable({
data <- filtered_data()
if (nrow(data) == 0) {
return(data.frame(Message = "No data available for selected filters"))
}
summary_df <- data %>%
group_by(category) %>%
summarise(
Count = n(),
Avg_Value = round(mean(metric_value, na.rm = TRUE), 2),
Min_Value = min(metric_value, na.rm = TRUE),
Max_Value = max(metric_value, na.rm = TRUE)
)
summary_df
})
output$filteredData <- renderTable({
filtered_data()
})
}
shinyApp(ui, server)
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(readxl)
library(ggplot2)
library(DT)
library(dplyr)
file_path <- "C:/Users/gbolu/OneDrive/Desktop/HDS500/DATA/Cleaned_Health_Data_2015_2021.xlsx"
data <- read_excel(file_path)
ui <- fluidPage(
titlePanel("Health Data Explorer (2015-2021)"),
sidebarLayout(
sidebarPanel(
selectInput("year", "Select Year:", choices = unique(data$year), selected = 2021, multiple = TRUE),
selectInput("metric", "Select Metric:", choices = unique(data$metric_name), selected = "life_expectancy_at_birth"),
selectInput("race", "Select Race/Ethnicity:", choices = unique(data$race_ethnicity), selected = "All races/ethnicities"),
selectInput("sex", "Select Sex:", choices = unique(data$sex), selected = "Male")
),
mainPanel(
tabsetPanel(
tabPanel("Data Table", DTOutput("dataTable")),
tabPanel("Trend Plot", plotOutput("trendPlot"))
)
)
)
)
server <- function(input, output) {
filtered_data <- reactive({
data %>%
filter(
year %in% input$year,
metric_name == input$metric,
race_ethnicity == input$race,
sex == input$sex
)
})
output$dataTable <- renderDT({
datatable(filtered_data(), options = list(pageLength = 10))
})
output$trendPlot <- renderPlot({
plot_data <- filtered_data()
if (nrow(plot_data) > 0) {
ggplot(plot_data, aes(x = year, y = metric_value, group = sex, color = sex)) +
geom_line(size = 1.2) +
geom_point(size = 3) +
labs(title = paste("Trend for", input$metric),
x = "Year",
y = "Metric Value") +
theme_minimal()
} else {
plot.new()
text(0.5, 0.5, "No data available for selected filters", cex = 1.5)
}
})
}
shinyApp(ui = ui, server = server)
devtools::install(".")
devtools::install(".")
getwd()
setwd("C:/Users/gbolu/Downloads/Github/Quickstats")
getwd()  # Verify the new path
